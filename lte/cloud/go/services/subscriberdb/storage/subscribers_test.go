package storage

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"magma/orc8r/cloud/go/sqorc"
)

func TestSubscriberStorage(t *testing.T) {
	db, err := sqorc.Open("sqlite3", ":memory:")
	assert.NoError(t, err)
	s := NewSubscriberStorage(db, sqorc.GetSqlBuilder())
	assert.NoError(t, s.Initialize())

	t.Run("simple insert", func(t *testing.T) {
		subscriber := []Blob{{
			Key:     "wonderful IMSI",
			Value:   []byte("eyJtYWNoaW5lX2luZm8iOiB7ImNwdV9pbmZvIjogeyJjb3JlX2NvdW50IjogNCwgInRocmVhZHNfcGVyX2NvcmUiOiAxLCAiYXJjaGl0ZWN0dXJlIjogIng4Nl82NCIsICJtb2RlbF9uYW1lIjogIkludGVsKFIpIENvcmUoVE0pIGk3LTk3NTBIIENQVSBAIDIuNjBHSHoifSwgIm5ldHdvcmtfaW5mbyI6IHsibmV0d29ya19pbnRlcmZhY2VzIjogW3sibmV0d29ya19pbnRlcmZhY2VfaWQiOiAibG8iLCAibWFjX2FkZHJlc3MiOiAiMDA6MDA6MDA6MDA6MDA6MDAiLCAiaXBfYWRkcmVzc2VzIjogWyIxMjcuMC4wLjEvOCJdLCAic3RhdHVzIjogIlVQIiwgImlwdjZfYWRkcmVzc2VzIjogW119LCB7Im5ldHdvcmtfaW50ZXJmYWNlX2lkIjogImV0aDAiLCAibWFjX2FkZHJlc3MiOiAiMDI6YTY6NGQ6Nzc6ZTE6MDAiLCAiaXBfYWRkcmVzc2VzIjogWyIxMC4wLjIuMTUvMjQiXSwgInN0YXR1cyI6ICJVUCIsICJpcHY2X2FkZHJlc3NlcyI6IFtdfSwgeyJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJldGgxIiwgIm1hY19hZGRyZXNzIjogIjA4OjAwOjI3OjI5OmYwOmE1IiwgImlwX2FkZHJlc3NlcyI6IFsiMTkyLjE2OC42MC4xNDIvMjQiXSwgInN0YXR1cyI6ICJVUCIsICJpcHY2X2FkZHJlc3NlcyI6IFtdfSwgeyJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJldGgyIiwgIm1hY19hZGRyZXNzIjogIjA4OjAwOjI3OjVhOmI0OjM5IiwgImlwX2FkZHJlc3NlcyI6IFsiMTkyLjE2OC4xMjkuMS8yNCJdLCAic3RhdHVzIjogIlVQIiwgImlwdjZfYWRkcmVzc2VzIjogW119LCB7Im5ldHdvcmtfaW50ZXJmYWNlX2lkIjogInByb3h5X3BvcnQiLCAibWFjX2FkZHJlc3MiOiAiYTI6OGE6YTk6NzY6ZWM6ZGEiLCAiaXBfYWRkcmVzc2VzIjogW10sICJzdGF0dXMiOiAiRE9XTiIsICJpcHY2X2FkZHJlc3NlcyI6IFtdfSwgeyJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJkb2NrZXIwIiwgIm1hY19hZGRyZXNzIjogIjAyOjQyOmVmOjg3OjA3Ojg4IiwgImlwX2FkZHJlc3NlcyI6IFsiMTcyLjE3LjAuMS8xNiJdLCAic3RhdHVzIjogIlVQIiwgImlwdjZfYWRkcmVzc2VzIjogW119LCB7Im5ldHdvcmtfaW50ZXJmYWNlX2lkIjogIm92cy1zeXN0ZW0iLCAibWFjX2FkZHJlc3MiOiAiMzI6ODA6NjM6YTI6MWI6ZjYiLCAiaXBfYWRkcmVzc2VzIjogW10sICJzdGF0dXMiOiAiRE9XTiIsICJpcHY2X2FkZHJlc3NlcyI6IFtdfSwgeyJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJ1cGxpbmtfYnIwIiwgIm1hY19hZGRyZXNzIjogIjVlOjhlOmRlOjYzOmM5OjRiIiwgImlwX2FkZHJlc3NlcyI6IFtdLCAic3RhdHVzIjogIkRPV04iLCAiaXB2Nl9hZGRyZXNzZXMiOiBbXX0sIHsibmV0d29ya19pbnRlcmZhY2VfaWQiOiAiZGhjcDAiLCAibWFjX2FkZHJlc3MiOiAiN2E6Yjg6YzA6Zjg6OGQ6OWUiLCAiaXBfYWRkcmVzc2VzIjogW10sICJzdGF0dXMiOiAiRE9XTiIsICJpcHY2X2FkZHJlc3NlcyI6IFtdfSwgeyJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJndHBfYnIwIiwgIm1hY19hZGRyZXNzIjogImI2OjMyOmJjOjI4OjRlOjQxIiwgImlwX2FkZHJlc3NlcyI6IFsiMTkyLjE2OC4xMjguMS8yNCJdLCAic3RhdHVzIjogIlVQIiwgImlwdjZfYWRkcmVzc2VzIjogW119LCB7Im5ldHdvcmtfaW50ZXJmYWNlX2lkIjogImd0cHVfc3lzXzIxNTIiLCAibWFjX2FkZHJlc3MiOiBudWxsLCAiaXBfYWRkcmVzc2VzIjogW10sICJzdGF0dXMiOiAiRE9XTiIsICJpcHY2X2FkZHJlc3NlcyI6IFtdfSwgeyJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJtdHIwIiwgIm1hY19hZGRyZXNzIjogIjVhOjlhOjMzOmUyOmNiOmE4IiwgImlwX2FkZHJlc3NlcyI6IFsiMTAuMS4wLjEvMjQiXSwgInN0YXR1cyI6ICJVUCIsICJpcHY2X2FkZHJlc3NlcyI6IFtdfSwgeyJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJpcGZpeDAiLCAibWFjX2FkZHJlc3MiOiAiOTI6ZmI6ZDg6NzQ6ODY6NzgiLCAiaXBfYWRkcmVzc2VzIjogWyIxMjcuMC4wLjEwLzI0Il0sICJzdGF0dXMiOiAiVVAiLCAiaXB2Nl9hZGRyZXNzZXMiOiBbXX0sIHsibmV0d29ya19pbnRlcmZhY2VfaWQiOiAibGlfcG9ydCIsICJtYWNfYWRkcmVzcyI6ICI4ZTpiNDo3MjplNTo0ZTowNSIsICJpcF9hZGRyZXNzZXMiOiBbIjEyNy4xLjAuMC8yNCJdLCAic3RhdHVzIjogIlVQIiwgImlwdjZfYWRkcmVzc2VzIjogW119LCB7Im5ldHdvcmtfaW50ZXJmYWNlX2lkIjogImVudm95X2NudHIiLCAibWFjX2FkZHJlc3MiOiAiMzI6ZWM6NWQ6MjM6YzI6MjIiLCAiaXBfYWRkcmVzc2VzIjogWyIxMC41LjAuMi8yNCJdLCAic3RhdHVzIjogIlVQIiwgImlwdjZfYWRkcmVzc2VzIjogW119XSwgInJvdXRpbmdfdGFibGUiOiBbeyJkZXN0aW5hdGlvbl9pcCI6ICIwLjAuMC4wIiwgImdhdGV3YXlfaXAiOiAiMTAuMC4yLjIiLCAiZ2VubWFzayI6ICIwLjAuMC4wIiwgIm5ldHdvcmtfaW50ZXJmYWNlX2lkIjogImV0aDAifSwgeyJkZXN0aW5hdGlvbl9pcCI6ICIxMC4wLjIuMCIsICJnYXRld2F5X2lwIjogIjAuMC4wLjAiLCAiZ2VubWFzayI6ICIyNTUuMjU1LjI1NS4wIiwgIm5ldHdvcmtfaW50ZXJmYWNlX2lkIjogImV0aDAifSwgeyJkZXN0aW5hdGlvbl9pcCI6ICIxMC4xLjAuMCIsICJnYXRld2F5X2lwIjogIjAuMC4wLjAiLCAiZ2VubWFzayI6ICIyNTUuMjU1LjI1NS4wIiwgIm5ldHdvcmtfaW50ZXJmYWNlX2lkIjogIm10cjAifSwgeyJkZXN0aW5hdGlvbl9pcCI6ICIxMC41LjAuMCIsICJnYXRld2F5X2lwIjogIjAuMC4wLjAiLCAiZ2VubWFzayI6ICIyNTUuMjU1LjI1NS4wIiwgIm5ldHdvcmtfaW50ZXJmYWNlX2lkIjogImVudm95X2NudHIifSwgeyJkZXN0aW5hdGlvbl9pcCI6ICIxMjcuMC4wLjAiLCAiZ2F0ZXdheV9pcCI6ICIwLjAuMC4wIiwgImdlbm1hc2siOiAiMjU1LjI1NS4yNTUuMCIsICJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJpcGZpeDAifSwgeyJkZXN0aW5hdGlvbl9pcCI6ICIxMjcuMS4wLjAiLCAiZ2F0ZXdheV9pcCI6ICIwLjAuMC4wIiwgImdlbm1hc2siOiAiMjU1LjI1NS4yNTUuMCIsICJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJsaV9wb3J0In0sIHsiZGVzdGluYXRpb25faXAiOiAiMTcyLjE3LjAuMCIsICJnYXRld2F5X2lwIjogIjAuMC4wLjAiLCAiZ2VubWFzayI6ICIyNTUuMjU1LjAuMCIsICJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJkb2NrZXIwIn0sIHsiZGVzdGluYXRpb25faXAiOiAiMTkyLjE2OC42MC4wIiwgImdhdGV3YXlfaXAiOiAiMC4wLjAuMCIsICJnZW5tYXNrIjogIjI1NS4yNTUuMjU1LjAiLCAibmV0d29ya19pbnRlcmZhY2VfaWQiOiAiZXRoMSJ9LCB7ImRlc3RpbmF0aW9uX2lwIjogIjE5Mi4xNjguMTI4LjAiLCAiZ2F0ZXdheV9pcCI6ICIwLjAuMC4wIiwgImdlbm1hc2siOiAiMjU1LjI1NS4yNTUuMCIsICJuZXR3b3JrX2ludGVyZmFjZV9pZCI6ICJndHBfYnIwIn0sIHsiZGVzdGluYXRpb25faXAiOiAiMTkyLjE2OC4xMjkuMCIsICJnYXRld2F5X2lwIjogIjAuMC4wLjAiLCAiZ2VubWFzayI6ICIyNTUuMjU1LjI1NS4wIiwgIm5ldHdvcmtfaW50ZXJmYWNlX2lkIjogImV0aDIifV19fSwgIm1ldGEiOiB7fSwgInBsYXRmb3JtX2luZm8iOiB7InZwbl9pcCI6ICJOL0EiLCAicGFja2FnZXMiOiBbeyJuYW1lIjogIm1hZ21hIiwgInZlcnNpb24iOiAibGF0ZXN0In1dLCAia2VybmVsX3ZlcnNpb24iOiAiNS40LjAtNzQtZ2VuZXJpYyIsICJrZXJuZWxfdmVyc2lvbnNfaW5zdGFsbGVkIjogW10sICJjb25maWdfaW5mbyI6IHsibWNvbmZpZ19jcmVhdGVkX2F0IjogMTY1MjEwMjA3MX19LCAic3lzdGVtX3N0YXR1cyI6IHsidGltZSI6IDE2NTIxMDIwNzEsICJ1cHRpbWVfc2VjcyI6IDk0OTQsICJjcHVfdXNlciI6IDMwMTc2MjAsICJjcHVfc3lzdGVtIjogMTcxNTI1MCwgImNwdV9pZGxlIjogMzE0MDU3MzAsICJtZW1fdG90YWwiOiA4MzQ4NDcxMjk2LCAibWVtX2F2YWlsYWJsZSI6IDYzODcyMjg2NzIsICJtZW1fdXNlZCI6IDE2Nzc5MzA0OTYsICJtZW1fZnJlZSI6IDM1NjA3NzU2OCwgInN3YXBfdG90YWwiOiA0Mjk0OTYzMjAwLCAic3dhcF91c2VkIjogMzAwNjg3MzYsICJzd2FwX2ZyZWUiOiA0MjY0ODk0NDY0LCAiZGlza19wYXJ0aXRpb25zIjogW3siZGV2aWNlIjogIi9kZXYvc2RhMSIsICJtb3VudF9wb2ludCI6ICIvZXRjL3Nub3dmbGFrZSIsICJ0b3RhbCI6IDQxNTY3ODU4Njg4LCAidXNlZCI6IDMyMDU4MzcyMDk2LCAiZnJlZSI6IDk0OTI3MDkzNzZ9LCB7ImRldmljZSI6ICIvZGV2L3NkYTEiLCAibW91bnRfcG9pbnQiOiAiL2V0Yy9yZXNvbHYuY29uZiIsICJ0b3RhbCI6IDQxNTY3ODU4Njg4LCAidXNlZCI6IDMyMDU4MzcyMDk2LCAiZnJlZSI6IDk0OTI3MDkzNzZ9LCB7ImRldmljZSI6ICIvZGV2L3NkYTEiLCAibW91bnRfcG9pbnQiOiAiL2V0Yy9ob3N0bmFtZSIsICJ0b3RhbCI6IDQxNTY3ODU4Njg4LCAidXNlZCI6IDMyMDU4MzcyMDk2LCAiZnJlZSI6IDk0OTI3MDkzNzZ9LCB7ImRldmljZSI6ICIvZGV2L3NkYTEiLCAibW91bnRfcG9pbnQiOiAiL2V0Yy9ob3N0cyIsICJ0b3RhbCI6IDQxNTY3ODU4Njg4LCAidXNlZCI6IDMyMDU4MzcyMDk2LCAiZnJlZSI6IDk0OTI3MDkzNzZ9LCB7ImRldmljZSI6ICIvZGV2L3NkYTEiLCAibW91bnRfcG9pbnQiOiAiL3Zhci9vcHQvbWFnbWEvY2VydHMiLCAidG90YWwiOiA0MTU2Nzg1ODY4OCwgInVzZWQiOiAzMjA1ODM3MjA5NiwgImZyZWUiOiA5NDkyNzA5Mzc2fSwgeyJkZXZpY2UiOiAiL2Rldi9zZGExIiwgIm1vdW50X3BvaW50IjogIi92YXIvb3B0L21hZ21hL2NvbmZpZ3MiLCAidG90YWwiOiA0MTU2Nzg1ODY4OCwgInVzZWQiOiAzMjA1ODM3MjA5NiwgImZyZWUiOiA5NDkyNzA5Mzc2fV19fQ=="),
			Version: 0,
		}}
		err = s.SetSubscribers("network_1", "snowflake_ID", subscriber)
		assert.NoError(t, err)
	})
}
// TODO Get Method would be nice for automated tests.


// Why is it racy if I use a sql.Open("sqlite3", ":memory:") database?
//
// Each connection to ":memory:" opens a brand new in-memory sql database, so if the stdlib's sql engine happens to open another connection and you've only specified ":memory:", that connection will see a brand new database. A workaround is to use "file::memory:?cache=shared" (or "file:foobar?mode=memory&cache=shared"). Every connection to this string will point to the same in-memory database.
//
// Note that if the last database connection in the pool closes, the in-memory database is deleted. Make sure the max idle connection limit is > 0, and the connection lifetime is infinite.
// Source: FAQs of the sqlite3 driver used here https://github.com/mattn/go-sqlite3
