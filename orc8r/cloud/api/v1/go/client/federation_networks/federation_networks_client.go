// Code generated by go-swagger; DO NOT EDIT.

package federation_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new federation networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for federation networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteFegNetworkID(params *DeleteFegNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFegNetworkIDNoContent, error)

	DeleteFegNetworkIDFederation(params *DeleteFegNetworkIDFederationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFegNetworkIDFederationNoContent, error)

	DeleteFegNetworkIDSubscriberConfigBaseNamesBaseName(params *DeleteFegNetworkIDSubscriberConfigBaseNamesBaseNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFegNetworkIDSubscriberConfigBaseNamesBaseNameNoContent, error)

	DeleteFegNetworkIDSubscriberConfigRuleNamesRuleID(params *DeleteFegNetworkIDSubscriberConfigRuleNamesRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFegNetworkIDSubscriberConfigRuleNamesRuleIDNoContent, error)

	GetFeg(params *GetFegParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegOK, error)

	GetFegNetworkID(params *GetFegNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDOK, error)

	GetFegNetworkIDClusterStatus(params *GetFegNetworkIDClusterStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDClusterStatusOK, error)

	GetFegNetworkIDFederation(params *GetFegNetworkIDFederationParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDFederationOK, error)

	GetFegNetworkIDSubscriberConfig(params *GetFegNetworkIDSubscriberConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDSubscriberConfigOK, error)

	GetFegNetworkIDSubscriberConfigBaseNames(params *GetFegNetworkIDSubscriberConfigBaseNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDSubscriberConfigBaseNamesOK, error)

	GetFegNetworkIDSubscriberConfigRuleNames(params *GetFegNetworkIDSubscriberConfigRuleNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDSubscriberConfigRuleNamesOK, error)

	PostFeg(params *PostFegParams, authInfo runtime.ClientAuthInfoWriter) (*PostFegCreated, error)

	PostFegNetworkIDSubscriberConfigBaseNamesBaseName(params *PostFegNetworkIDSubscriberConfigBaseNamesBaseNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostFegNetworkIDSubscriberConfigBaseNamesBaseNameCreated, error)

	PostFegNetworkIDSubscriberConfigRuleNamesRuleID(params *PostFegNetworkIDSubscriberConfigRuleNamesRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostFegNetworkIDSubscriberConfigRuleNamesRuleIDCreated, error)

	PutFegNetworkID(params *PutFegNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDNoContent, error)

	PutFegNetworkIDFederation(params *PutFegNetworkIDFederationParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDFederationOK, error)

	PutFegNetworkIDSubscriberConfig(params *PutFegNetworkIDSubscriberConfigParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDSubscriberConfigNoContent, error)

	PutFegNetworkIDSubscriberConfigBaseNames(params *PutFegNetworkIDSubscriberConfigBaseNamesParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDSubscriberConfigBaseNamesNoContent, error)

	PutFegNetworkIDSubscriberConfigRuleNames(params *PutFegNetworkIDSubscriberConfigRuleNamesParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDSubscriberConfigRuleNamesNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteFegNetworkID deletes a federation network
*/
func (a *Client) DeleteFegNetworkID(params *DeleteFegNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFegNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFegNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFegNetworkID",
		Method:             "DELETE",
		PathPattern:        "/feg/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFegNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFegNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFegNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteFegNetworkIDFederation deletes network federation configs
*/
func (a *Client) DeleteFegNetworkIDFederation(params *DeleteFegNetworkIDFederationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFegNetworkIDFederationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFegNetworkIDFederationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFegNetworkIDFederation",
		Method:             "DELETE",
		PathPattern:        "/feg/{network_id}/federation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFegNetworkIDFederationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFegNetworkIDFederationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFegNetworkIDFederationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteFegNetworkIDSubscriberConfigBaseNamesBaseName adds a network wide base name
*/
func (a *Client) DeleteFegNetworkIDSubscriberConfigBaseNamesBaseName(params *DeleteFegNetworkIDSubscriberConfigBaseNamesBaseNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFegNetworkIDSubscriberConfigBaseNamesBaseNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFegNetworkIDSubscriberConfigBaseNamesBaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFegNetworkIDSubscriberConfigBaseNamesBaseName",
		Method:             "DELETE",
		PathPattern:        "/feg/{network_id}/subscriber_config/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFegNetworkIDSubscriberConfigBaseNamesBaseNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFegNetworkIDSubscriberConfigBaseNamesBaseNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFegNetworkIDSubscriberConfigBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteFegNetworkIDSubscriberConfigRuleNamesRuleID adds a network wide rule name
*/
func (a *Client) DeleteFegNetworkIDSubscriberConfigRuleNamesRuleID(params *DeleteFegNetworkIDSubscriberConfigRuleNamesRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFegNetworkIDSubscriberConfigRuleNamesRuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFegNetworkIDSubscriberConfigRuleNamesRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFegNetworkIDSubscriberConfigRuleNamesRuleID",
		Method:             "DELETE",
		PathPattern:        "/feg/{network_id}/subscriber_config/rule_names/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFegNetworkIDSubscriberConfigRuleNamesRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFegNetworkIDSubscriberConfigRuleNamesRuleIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFegNetworkIDSubscriberConfigRuleNamesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFeg lists all federation network i ds
*/
func (a *Client) GetFeg(params *GetFegParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFeg",
		Method:             "GET",
		PathPattern:        "/feg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFegNetworkID describes a federation network
*/
func (a *Client) GetFegNetworkID(params *GetFegNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkID",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFegNetworkIDClusterStatus retrieves h a cluster status of a federation network
*/
func (a *Client) GetFegNetworkIDClusterStatus(params *GetFegNetworkIDClusterStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDClusterStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDClusterStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDClusterStatus",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/cluster_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDClusterStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDClusterStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDClusterStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFegNetworkIDFederation retrieves network federation configs
*/
func (a *Client) GetFegNetworkIDFederation(params *GetFegNetworkIDFederationParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDFederationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDFederationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDFederation",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/federation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDFederationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDFederationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDFederationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFegNetworkIDSubscriberConfig gets a network wide subscriber config
*/
func (a *Client) GetFegNetworkIDSubscriberConfig(params *GetFegNetworkIDSubscriberConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDSubscriberConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDSubscriberConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDSubscriberConfig",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/subscriber_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDSubscriberConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDSubscriberConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDSubscriberConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFegNetworkIDSubscriberConfigBaseNames gets network wide base names
*/
func (a *Client) GetFegNetworkIDSubscriberConfigBaseNames(params *GetFegNetworkIDSubscriberConfigBaseNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDSubscriberConfigBaseNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDSubscriberConfigBaseNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDSubscriberConfigBaseNames",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/subscriber_config/base_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDSubscriberConfigBaseNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDSubscriberConfigBaseNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDSubscriberConfigBaseNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFegNetworkIDSubscriberConfigRuleNames gets network wide rule names
*/
func (a *Client) GetFegNetworkIDSubscriberConfigRuleNames(params *GetFegNetworkIDSubscriberConfigRuleNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFegNetworkIDSubscriberConfigRuleNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFegNetworkIDSubscriberConfigRuleNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFegNetworkIDSubscriberConfigRuleNames",
		Method:             "GET",
		PathPattern:        "/feg/{network_id}/subscriber_config/rule_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFegNetworkIDSubscriberConfigRuleNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFegNetworkIDSubscriberConfigRuleNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFegNetworkIDSubscriberConfigRuleNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostFeg creates a new federation network
*/
func (a *Client) PostFeg(params *PostFegParams, authInfo runtime.ClientAuthInfoWriter) (*PostFegCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFegParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFeg",
		Method:             "POST",
		PathPattern:        "/feg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostFegReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFegCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFegDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostFegNetworkIDSubscriberConfigBaseNamesBaseName adds a network wide base name
*/
func (a *Client) PostFegNetworkIDSubscriberConfigBaseNamesBaseName(params *PostFegNetworkIDSubscriberConfigBaseNamesBaseNameParams, authInfo runtime.ClientAuthInfoWriter) (*PostFegNetworkIDSubscriberConfigBaseNamesBaseNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFegNetworkIDSubscriberConfigBaseNamesBaseNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFegNetworkIDSubscriberConfigBaseNamesBaseName",
		Method:             "POST",
		PathPattern:        "/feg/{network_id}/subscriber_config/base_names/{base_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostFegNetworkIDSubscriberConfigBaseNamesBaseNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFegNetworkIDSubscriberConfigBaseNamesBaseNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFegNetworkIDSubscriberConfigBaseNamesBaseNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostFegNetworkIDSubscriberConfigRuleNamesRuleID adds a network wide rule name
*/
func (a *Client) PostFegNetworkIDSubscriberConfigRuleNamesRuleID(params *PostFegNetworkIDSubscriberConfigRuleNamesRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostFegNetworkIDSubscriberConfigRuleNamesRuleIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFegNetworkIDSubscriberConfigRuleNamesRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFegNetworkIDSubscriberConfigRuleNamesRuleID",
		Method:             "POST",
		PathPattern:        "/feg/{network_id}/subscriber_config/rule_names/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostFegNetworkIDSubscriberConfigRuleNamesRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFegNetworkIDSubscriberConfigRuleNamesRuleIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFegNetworkIDSubscriberConfigRuleNamesRuleIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutFegNetworkID updates an entire federation network
*/
func (a *Client) PutFegNetworkID(params *PutFegNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFegNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFegNetworkID",
		Method:             "PUT",
		PathPattern:        "/feg/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutFegNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFegNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutFegNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutFegNetworkIDFederation creates or modify network federation configs
*/
func (a *Client) PutFegNetworkIDFederation(params *PutFegNetworkIDFederationParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDFederationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFegNetworkIDFederationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFegNetworkIDFederation",
		Method:             "PUT",
		PathPattern:        "/feg/{network_id}/federation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutFegNetworkIDFederationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFegNetworkIDFederationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutFegNetworkIDFederationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutFegNetworkIDSubscriberConfig updates a network wide subscriber config
*/
func (a *Client) PutFegNetworkIDSubscriberConfig(params *PutFegNetworkIDSubscriberConfigParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDSubscriberConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFegNetworkIDSubscriberConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFegNetworkIDSubscriberConfig",
		Method:             "PUT",
		PathPattern:        "/feg/{network_id}/subscriber_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutFegNetworkIDSubscriberConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFegNetworkIDSubscriberConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutFegNetworkIDSubscriberConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutFegNetworkIDSubscriberConfigBaseNames updates network wide base names
*/
func (a *Client) PutFegNetworkIDSubscriberConfigBaseNames(params *PutFegNetworkIDSubscriberConfigBaseNamesParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDSubscriberConfigBaseNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFegNetworkIDSubscriberConfigBaseNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFegNetworkIDSubscriberConfigBaseNames",
		Method:             "PUT",
		PathPattern:        "/feg/{network_id}/subscriber_config/base_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutFegNetworkIDSubscriberConfigBaseNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFegNetworkIDSubscriberConfigBaseNamesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutFegNetworkIDSubscriberConfigBaseNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutFegNetworkIDSubscriberConfigRuleNames updates network wide rule names
*/
func (a *Client) PutFegNetworkIDSubscriberConfigRuleNames(params *PutFegNetworkIDSubscriberConfigRuleNamesParams, authInfo runtime.ClientAuthInfoWriter) (*PutFegNetworkIDSubscriberConfigRuleNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFegNetworkIDSubscriberConfigRuleNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFegNetworkIDSubscriberConfigRuleNames",
		Method:             "PUT",
		PathPattern:        "/feg/{network_id}/subscriber_config/rule_names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutFegNetworkIDSubscriberConfigRuleNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFegNetworkIDSubscriberConfigRuleNamesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutFegNetworkIDSubscriberConfigRuleNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
