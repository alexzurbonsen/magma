// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteNetworksNetworkID(params *DeleteNetworksNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworksNetworkIDNoContent, error)

	DeleteNetworksNetworkIDDNSRecordsDomain(params *DeleteNetworksNetworkIDDNSRecordsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworksNetworkIDDNSRecordsDomainNoContent, error)

	GetNetworks(params *GetNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksOK, error)

	GetNetworksNetworkID(params *GetNetworksNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDOK, error)

	GetNetworksNetworkIDDNS(params *GetNetworksNetworkIDDNSParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDDNSOK, error)

	GetNetworksNetworkIDDNSRecords(params *GetNetworksNetworkIDDNSRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDDNSRecordsOK, error)

	GetNetworksNetworkIDDNSRecordsDomain(params *GetNetworksNetworkIDDNSRecordsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDDNSRecordsDomainOK, error)

	GetNetworksNetworkIDDescription(params *GetNetworksNetworkIDDescriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDDescriptionOK, error)

	GetNetworksNetworkIDFeatures(params *GetNetworksNetworkIDFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDFeaturesOK, error)

	GetNetworksNetworkIDName(params *GetNetworksNetworkIDNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDNameOK, error)

	GetNetworksNetworkIDSentry(params *GetNetworksNetworkIDSentryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDSentryOK, error)

	GetNetworksNetworkIDState(params *GetNetworksNetworkIDStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDStateOK, error)

	GetNetworksNetworkIDType(params *GetNetworksNetworkIDTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDTypeOK, error)

	PostNetworks(params *PostNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*PostNetworksCreated, error)

	PostNetworksNetworkIDDNSRecordsDomain(params *PostNetworksNetworkIDDNSRecordsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*PostNetworksNetworkIDDNSRecordsDomainCreated, error)

	PutNetworksNetworkID(params *PutNetworksNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDNoContent, error)

	PutNetworksNetworkIDDNS(params *PutNetworksNetworkIDDNSParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDDNSNoContent, error)

	PutNetworksNetworkIDDNSRecords(params *PutNetworksNetworkIDDNSRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDDNSRecordsNoContent, error)

	PutNetworksNetworkIDDNSRecordsDomain(params *PutNetworksNetworkIDDNSRecordsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDDNSRecordsDomainNoContent, error)

	PutNetworksNetworkIDDescription(params *PutNetworksNetworkIDDescriptionParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDDescriptionNoContent, error)

	PutNetworksNetworkIDFeatures(params *PutNetworksNetworkIDFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDFeaturesNoContent, error)

	PutNetworksNetworkIDName(params *PutNetworksNetworkIDNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDNameNoContent, error)

	PutNetworksNetworkIDSentry(params *PutNetworksNetworkIDSentryParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDSentryNoContent, error)

	PutNetworksNetworkIDState(params *PutNetworksNetworkIDStateParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDStateNoContent, error)

	PutNetworksNetworkIDType(params *PutNetworksNetworkIDTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDTypeNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteNetworksNetworkID deletes a network
*/
func (a *Client) DeleteNetworksNetworkID(params *DeleteNetworksNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworksNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworksNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNetworksNetworkID",
		Method:             "DELETE",
		PathPattern:        "/networks/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNetworksNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworksNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNetworksNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteNetworksNetworkIDDNSRecordsDomain deletes the DNS record for a specific domain
*/
func (a *Client) DeleteNetworksNetworkIDDNSRecordsDomain(params *DeleteNetworksNetworkIDDNSRecordsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworksNetworkIDDNSRecordsDomainNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworksNetworkIDDNSRecordsDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNetworksNetworkIDDNSRecordsDomain",
		Method:             "DELETE",
		PathPattern:        "/networks/{network_id}/dns/records/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNetworksNetworkIDDNSRecordsDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworksNetworkIDDNSRecordsDomainNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNetworksNetworkIDDNSRecordsDomainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworks lists all network i ds
*/
func (a *Client) GetNetworks(params *GetNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworks",
		Method:             "GET",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkID gets a generic network description
*/
func (a *Client) GetNetworksNetworkID(params *GetNetworksNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkID",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDDNS gets DNS of network
*/
func (a *Client) GetNetworksNetworkIDDNS(params *GetNetworksNetworkIDDNSParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDDNSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDDNSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDDNS",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/dns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDDNSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDDNSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDDNSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDDNSRecords gets the DNS config records for the network
*/
func (a *Client) GetNetworksNetworkIDDNSRecords(params *GetNetworksNetworkIDDNSRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDDNSRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDDNSRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDDNSRecords",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/dns/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDDNSRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDDNSRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDDNSRecordsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDDNSRecordsDomain gets the DNS config record for a specific domain
*/
func (a *Client) GetNetworksNetworkIDDNSRecordsDomain(params *GetNetworksNetworkIDDNSRecordsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDDNSRecordsDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDDNSRecordsDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDDNSRecordsDomain",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/dns/records/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDDNSRecordsDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDDNSRecordsDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDDNSRecordsDomainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDDescription gets the description of a network
*/
func (a *Client) GetNetworksNetworkIDDescription(params *GetNetworksNetworkIDDescriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDDescriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDDescription",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDFeatures gets feature flags for network
*/
func (a *Client) GetNetworksNetworkIDFeatures(params *GetNetworksNetworkIDFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDFeatures",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDName gets the name of a network
*/
func (a *Client) GetNetworksNetworkIDName(params *GetNetworksNetworkIDNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDName",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDSentry gets the sentry io configuration for network
*/
func (a *Client) GetNetworksNetworkIDSentry(params *GetNetworksNetworkIDSentryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDSentryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDSentryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDSentry",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/sentry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDSentryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDSentryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDSentryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDState gets the state configuration for network
*/
func (a *Client) GetNetworksNetworkIDState(params *GetNetworksNetworkIDStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDState",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNetworksNetworkIDType gets the type of a network
*/
func (a *Client) GetNetworksNetworkIDType(params *GetNetworksNetworkIDTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworksNetworkIDTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksNetworkIDTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworksNetworkIDType",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/type",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworksNetworkIDTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksNetworkIDTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksNetworkIDTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostNetworks registers a network
*/
func (a *Client) PostNetworks(params *PostNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*PostNetworksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworks",
		Method:             "POST",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostNetworksNetworkIDDNSRecordsDomain creates a DNS record for a specific domain
*/
func (a *Client) PostNetworksNetworkIDDNSRecordsDomain(params *PostNetworksNetworkIDDNSRecordsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*PostNetworksNetworkIDDNSRecordsDomainCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworksNetworkIDDNSRecordsDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworksNetworkIDDNSRecordsDomain",
		Method:             "POST",
		PathPattern:        "/networks/{network_id}/dns/records/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNetworksNetworkIDDNSRecordsDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNetworksNetworkIDDNSRecordsDomainCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostNetworksNetworkIDDNSRecordsDomainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkID updates an entire network
*/
func (a *Client) PutNetworksNetworkID(params *PutNetworksNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkID",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDDNS updates DNS of network
*/
func (a *Client) PutNetworksNetworkIDDNS(params *PutNetworksNetworkIDDNSParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDDNSNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDDNSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDDNS",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/dns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDDNSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDDNSNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDDNSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDDNSRecords changes all the DNS records for the network
*/
func (a *Client) PutNetworksNetworkIDDNSRecords(params *PutNetworksNetworkIDDNSRecordsParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDDNSRecordsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDDNSRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDDNSRecords",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/dns/records",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDDNSRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDDNSRecordsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDDNSRecordsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDDNSRecordsDomain updates a DNS record for a specific domain
*/
func (a *Client) PutNetworksNetworkIDDNSRecordsDomain(params *PutNetworksNetworkIDDNSRecordsDomainParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDDNSRecordsDomainNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDDNSRecordsDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDDNSRecordsDomain",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/dns/records/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDDNSRecordsDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDDNSRecordsDomainNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDDNSRecordsDomainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDDescription updates the description of a network
*/
func (a *Client) PutNetworksNetworkIDDescription(params *PutNetworksNetworkIDDescriptionParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDDescriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDDescriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDDescription",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDDescriptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDDescriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDFeatures updates feature flags for network
*/
func (a *Client) PutNetworksNetworkIDFeatures(params *PutNetworksNetworkIDFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDFeaturesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDFeatures",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDFeaturesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDName updates the name of a network
*/
func (a *Client) PutNetworksNetworkIDName(params *PutNetworksNetworkIDNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDName",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDNameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDSentry updates the sentry io configuration for network
*/
func (a *Client) PutNetworksNetworkIDSentry(params *PutNetworksNetworkIDSentryParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDSentryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDSentryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDSentry",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/sentry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDSentryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDSentryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDSentryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDState updates the state configuration for network
*/
func (a *Client) PutNetworksNetworkIDState(params *PutNetworksNetworkIDStateParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDState",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutNetworksNetworkIDType updates the type of a network
*/
func (a *Client) PutNetworksNetworkIDType(params *PutNetworksNetworkIDTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PutNetworksNetworkIDTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNetworksNetworkIDTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNetworksNetworkIDType",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/type",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutNetworksNetworkIDTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNetworksNetworkIDTypeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutNetworksNetworkIDTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
