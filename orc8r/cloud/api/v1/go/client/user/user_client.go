// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteUserUsername(params *DeleteUserUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserUsernameNoContent, error)

	DeleteUserUsernameTokensToken(params *DeleteUserUsernameTokensTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserUsernameTokensTokenNoContent, error)

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error)

	GetUserUsername(params *GetUserUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserUsernameCreated, error)

	GetUserUsernameTokens(params *GetUserUsernameTokensParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserUsernameTokensOK, error)

	PostUser(params *PostUserParams, authInfo runtime.ClientAuthInfoWriter) (*PostUserCreated, error)

	PostUserLogin(params *PostUserLoginParams) (*PostUserLoginCreated, error)

	PostUserUsernameTokens(params *PostUserUsernameTokensParams, authInfo runtime.ClientAuthInfoWriter) (*PostUserUsernameTokensCreated, error)

	PutUserUsername(params *PutUserUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*PutUserUsernameNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteUserUsername removes a user
*/
func (a *Client) DeleteUserUsername(params *DeleteUserUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserUsernameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUserUsername",
		Method:             "DELETE",
		PathPattern:        "/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserUsernameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserUsernameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteUserUsernameTokensToken revokes the token and its policy from the user
*/
func (a *Client) DeleteUserUsernameTokensToken(params *DeleteUserUsernameTokensTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserUsernameTokensTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserUsernameTokensTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUserUsernameTokensToken",
		Method:             "DELETE",
		PathPattern:        "/user/{username}/tokens/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserUsernameTokensTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserUsernameTokensTokenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserUsernameTokensTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetUser lists all usernames
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUser",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetUserUsername gets a single user s information
*/
func (a *Client) GetUserUsername(params *GetUserUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserUsernameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserUsername",
		Method:             "GET",
		PathPattern:        "/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserUsernameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserUsernameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetUserUsernameTokens gets a list of a user s tokens and their respective policies
*/
func (a *Client) GetUserUsernameTokens(params *GetUserUsernameTokensParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserUsernameTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUsernameTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserUsernameTokens",
		Method:             "GET",
		PathPattern:        "/user/{username}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserUsernameTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserUsernameTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserUsernameTokensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostUser creates a user
*/
func (a *Client) PostUser(params *PostUserParams, authInfo runtime.ClientAuthInfoWriter) (*PostUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUser",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostUserLogin lists all the tokens given a user
*/
func (a *Client) PostUserLogin(params *PostUserLoginParams) (*PostUserLoginCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUserLogin",
		Method:             "POST",
		PathPattern:        "/user/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUserLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLoginCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostUserLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostUserUsernameTokens adds a token policy to the user s existing permissions
*/
func (a *Client) PostUserUsernameTokens(params *PostUserUsernameTokensParams, authInfo runtime.ClientAuthInfoWriter) (*PostUserUsernameTokensCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserUsernameTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUserUsernameTokens",
		Method:             "POST",
		PathPattern:        "/user/{username}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUserUsernameTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserUsernameTokensCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostUserUsernameTokensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutUserUsername updates a user s password
*/
func (a *Client) PutUserUsername(params *PutUserUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*PutUserUsernameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUserUsername",
		Method:             "PUT",
		PathPattern:        "/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutUserUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserUsernameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutUserUsernameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
