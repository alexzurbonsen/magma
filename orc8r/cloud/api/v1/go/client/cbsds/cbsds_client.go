// Code generated by go-swagger; DO NOT EDIT.

package cbsds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cbsds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cbsds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDpNetworkIDCbsdsCbsdID(params *DeleteDpNetworkIDCbsdsCbsdIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDpNetworkIDCbsdsCbsdIDNoContent, error)

	GetDpNetworkIDCbsds(params *GetDpNetworkIDCbsdsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDpNetworkIDCbsdsOK, error)

	GetDpNetworkIDCbsdsCbsdID(params *GetDpNetworkIDCbsdsCbsdIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDpNetworkIDCbsdsCbsdIDOK, error)

	PostDpNetworkIDCbsds(params *PostDpNetworkIDCbsdsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDpNetworkIDCbsdsCreated, error)

	PutDpNetworkIDCbsdsCbsdID(params *PutDpNetworkIDCbsdsCbsdIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDpNetworkIDCbsdsCbsdIDNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDpNetworkIDCbsdsCbsdID deletes c b s d from LTE network
*/
func (a *Client) DeleteDpNetworkIDCbsdsCbsdID(params *DeleteDpNetworkIDCbsdsCbsdIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDpNetworkIDCbsdsCbsdIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDpNetworkIDCbsdsCbsdIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDpNetworkIDCbsdsCbsdID",
		Method:             "DELETE",
		PathPattern:        "/dp/{network_id}/cbsds/{cbsd_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDpNetworkIDCbsdsCbsdIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDpNetworkIDCbsdsCbsdIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDpNetworkIDCbsdsCbsdIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDpNetworkIDCbsds lists all c b s ds in LTE network
*/
func (a *Client) GetDpNetworkIDCbsds(params *GetDpNetworkIDCbsdsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDpNetworkIDCbsdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDpNetworkIDCbsdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDpNetworkIDCbsds",
		Method:             "GET",
		PathPattern:        "/dp/{network_id}/cbsds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDpNetworkIDCbsdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDpNetworkIDCbsdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDpNetworkIDCbsdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDpNetworkIDCbsdsCbsdID retrieves c b s d from LTE network
*/
func (a *Client) GetDpNetworkIDCbsdsCbsdID(params *GetDpNetworkIDCbsdsCbsdIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDpNetworkIDCbsdsCbsdIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDpNetworkIDCbsdsCbsdIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDpNetworkIDCbsdsCbsdID",
		Method:             "GET",
		PathPattern:        "/dp/{network_id}/cbsds/{cbsd_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDpNetworkIDCbsdsCbsdIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDpNetworkIDCbsdsCbsdIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDpNetworkIDCbsdsCbsdIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostDpNetworkIDCbsds creates new cbsd
*/
func (a *Client) PostDpNetworkIDCbsds(params *PostDpNetworkIDCbsdsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDpNetworkIDCbsdsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDpNetworkIDCbsdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDpNetworkIDCbsds",
		Method:             "POST",
		PathPattern:        "/dp/{network_id}/cbsds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDpNetworkIDCbsdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDpNetworkIDCbsdsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDpNetworkIDCbsdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutDpNetworkIDCbsdsCbsdID updates c b s d in LTE network
*/
func (a *Client) PutDpNetworkIDCbsdsCbsdID(params *PutDpNetworkIDCbsdsCbsdIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDpNetworkIDCbsdsCbsdIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDpNetworkIDCbsdsCbsdIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDpNetworkIDCbsdsCbsdID",
		Method:             "PUT",
		PathPattern:        "/dp/{network_id}/cbsds/{cbsd_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDpNetworkIDCbsdsCbsdIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDpNetworkIDCbsdsCbsdIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutDpNetworkIDCbsdsCbsdIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
